import PokemonService from "./pokemon.service"

class PokemonController {
    async consumirPokeData(req, res) {
        try {
            await PokemonService.consumirPokeData()
            res.send('ok')
        } catch (error) {
            console.log(error)
        }
    }

    async pokemonsByType(req, res) {
        try {
            await PokemonService.pokemonsByType()
            res.send('ok')
        } catch (error) {
            console.log(error)
        }
    }

    async getPokemonsByType(req, res) {
        const {type} = req.params

        try {
            const pokemons = await PokemonService.getPokemonsByType(type)
            res.json(pokemons)
        } catch (error) {
            console.log(error)
        }
    }

    async getPokemonsByNumDex(req, res) {
        const {numDex} = req.params

        try {
            const pokemons = await PokemonService.getPokemonsByNumDex(numDex)
            res.json(pokemons)
        } catch (error) {
            console.log(error)
        }
    }

    async getPokemonsByNome(req, res) {
        const {nome} = req.params

        try {
            const pokemon = await PokemonService.getPokemonsByNome(nome)
            res.json(pokemon)
        } catch (error) {
            console.log(error)
        }
    }
}

export default new PokemonController()

/*
Este trecho de código consiste em várias funções assíncronas que são manipuladores de rota em um servidor. Vou explicar o que cada uma dessas funções faz:

1. `async consumirPokeData(req, res) { ... }`:
   - Esta função assíncrona é um manipulador de rota que é chamado quando uma rota específica é acessada.
   - Dentro da função, é chamado `PokemonService.consumirPokeData()`, que provavelmente é responsável por consumir dados relacionados a Pokémon de uma fonte externa e armazená-los no banco de dados.
   - O `await` é usado para aguardar a conclusão dessa operação assíncrona antes de prosseguir.
   - Se a operação for concluída com sucesso, a resposta é enviada com o corpo "ok".
   - Caso ocorra algum erro durante a execução, o erro é capturado e registrado no console.

2. `async pokemonsByType(req, res) { ... }`:
   - Esta função assíncrona também é um manipulador de rota.
   - Ela chama `PokemonService.pokemonsByType()`, que provavelmente é responsável por agrupar os Pokémon por tipo e armazenar essas informações em algum lugar.
   - O `await` é usado para aguardar a conclusão dessa operação assíncrona.
   - Se a operação for bem-sucedida, a resposta é enviada com o corpo "ok".
   - Se ocorrer algum erro durante a execução, o erro é capturado e registrado no console.

3. `async getPokemonsByType(req, res) { ... }`:
   - Essa função assíncrona é outro manipulador de rota que é acionado quando uma rota específica é acessada, contendo um parâmetro `type` na URL.
   - O valor do parâmetro `type` é obtido a partir de `req.params.type`.
   - Em seguida, a função chama `PokemonService.getPokemonsByType(type)`, que provavelmente faz uma consulta no banco de dados para obter os Pokémon com o tipo especificado.
   - O `await` é usado para esperar a conclusão da consulta assíncrona.
   - Se a consulta for bem-sucedida, os dados dos Pokémon são enviados como resposta no formato JSON.
   - Se ocorrer algum erro durante a execução, o erro é capturado e registrado no console.

4. `async getPokemonsByNumDex(req, res) { ... }`:
   - Esta função assíncrona é semelhante à anterior, mas em vez de buscar por tipo, busca Pokémon com base no número da Pokédex.
   - O número da Pokédex é obtido a partir de `req.params.numDex`.
   - A função chama `PokemonService.getPokemonsByNumDex(numDex)`, que provavelmente faz uma consulta no banco de dados para obter os Pokémon com o número da Pokédex especificado.
   - O `await` é usado para esperar a conclusão da consulta assíncrona.
   - Se a consulta for bem-sucedida, os dados dos Pokémon são enviados como resposta no formato JSON.
   - Se ocorrer algum erro durante a execução, o erro é capturado e registrado no console.

5. `async getPok

emonsByNome(req, res) { ... }`:
   - Essa função assíncrona é semelhante às anteriores, mas busca Pokémon com base no nome.
   - O nome do Pokémon é obtido a partir de `req.params.nome`.
   - A função chama `PokemonService.getPokemonsByNome(nome)`, que provavelmente faz uma consulta no banco de dados para obter o Pokémon com o nome especificado.
   - O `await` é usado para esperar a conclusão da consulta assíncrona.
   - Se a consulta for bem-sucedida, os dados do Pokémon são enviados como resposta no formato JSON.
   - Se ocorrer algum erro durante a execução, o erro é capturado e registrado no console.

Em resumo, essas funções assíncronas são manipuladores de rota que lidam com requisições relacionadas a Pokémon em um servidor. Elas interagem com o serviço `PokemonService` para executar operações no banco de dados, como consumir dados externos, realizar consultas e retornar os resultados correspondentes em formato JSON. Em caso de sucesso, uma resposta "ok" é enviada, caso contrário, o erro é registrado no console.

*/