import TeamModel from './team.schema'
import PokemonModel from '../pokemon/pokemon.schema'

class TeamService {
    async create(trainerName, team) {
        const promises = team.map(pokemon => {
            return PokemonModel.find({nome: pokemon.nome})
        })

        const pokemons = await Promise.all(promises).then(pokemons => {
            return pokemons.map(pokemon => {
                return {name: pokemon[0].nome}
            })
        })

        await TeamModel.create({trainerName, team: pokemons})
    }

    async find() {
        return await TeamModel.find()
    }

    async findByTrainerName(trainerName) {
        return await TeamModel.find({trainerName})
    }

    async update(trainerName, newData) {
        return TeamModel.updateOne({ trainerName }, { $set: { trainerName: newData.trainerName } })
    }   

    async delete(trainerName) {
        return await TeamModel.deleteOne({trainerName})
    }
}

export default new TeamService()


/*
A classe `TeamService` contém métodos assíncronos que lidam com a lógica de manipulação dos dados das equipes de Pokémon. Vou explicar cada método individualmente:

1. `async create(trainerName, team) { ... }`:
   - Este método cria uma nova equipe de Pokémon no banco de dados.
   - Ele recebe dois parâmetros: `trainerName` (nome do treinador) e `team` (array de Pokémon da equipe).
   - O método mapeia cada Pokémon da equipe e realiza uma consulta no banco de dados através do modelo `PokemonModel`, procurando pelo Pokémon correspondente ao nome.
   - Essas consultas são realizadas em paralelo usando o `map` e retornam uma matriz de promessas.
   - Em seguida, o método aguarda a resolução de todas as promessas usando `Promise.all`.
   - O resultado final é uma matriz de objetos contendo apenas o nome dos Pokémon encontrados.
   - Por fim, o método cria um novo documento na coleção `TeamModel` do banco de dados, armazenando o nome do treinador e a equipe de Pokémon.

2. `async find() { ... }`:
   - Este método busca todas as equipes de Pokémon existentes no banco de dados.
   - Ele não recebe nenhum parâmetro.
   - O método simplesmente chama o método `find()` do modelo `TeamModel` para realizar a consulta e retorna o resultado.

3. `async findByTrainerName(trainerName) { ... }`:
   - Este método busca uma equipe de Pokémon específica com base no nome do treinador.
   - Ele recebe um parâmetro `trainerName` que representa o nome do treinador da equipe.
   - O método chama o método `find()` do modelo `TeamModel`, passando um objeto de consulta `{trainerName}` para buscar equipes que correspondam ao nome do treinador.
   - Em seguida, ele retorna o resultado da consulta.

4. `async update(trainerName, newData) { ... }`:
   - Este método atualiza o nome de um treinador em uma equipe de Pokémon existente.
   - Ele recebe dois parâmetros: `trainerName` (nome do treinador atual) e `newData` (objeto contendo o novo nome do treinador).
   - O método chama o método `updateOne()` do modelo `TeamModel`, passando um objeto de consulta `{ trainerName }` e um objeto de atualização `{ $set: { trainerName: newData.trainerName } }`.
   - Isso resulta na atualização do nome do treinador na equipe de Pokémon correspondente no banco de dados.

5. `async delete(trainerName) { ... }`:
   - Este método exclui uma equipe de Pokémon com base no nome do treinador.
   - Ele recebe um parâmetro `trainerName` que representa o nome do treinador da equipe a ser excluída.
   - O método chama o método `deleteOne()` do modelo `TeamModel`, passando um objeto de consulta `{trainerName}` para identificar a equipe a ser excluída.
   - Isso resulta na exclusão da equipe de Pokémon correspondente no banco de dados.

Em resumo, a classe `TeamService` fornece métodos assíncronos para criar, buscar, atualizar e excluir equipes de Pokémon no banco de dados. Esses métodos interagem com os modelos de dados `TeamModel` e `PokemonModel` para realizar operações de consulta e modificação.
*/