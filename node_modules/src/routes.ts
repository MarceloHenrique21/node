import { Router } from "express"
import PokemonController from "./pokemon/pokemon.controller"
import TeamController from "./team/team.controller"

const router = Router()

router.post('/consumirData', PokemonController.consumirPokeData)
router.get('/pokemonsByType', PokemonController.pokemonsByType)
router.get('/pokemon/type/:type', PokemonController.getPokemonsByType)
router.get('/pokemon/numDex/:numDex', PokemonController.getPokemonsByNumDex)
router.get('/pokemon/nome/:nome', PokemonController.getPokemonsByNome)

router.post('/team', TeamController.create)
router.get('/team', TeamController.find)
router.get('/team/trainerName/:trainerName', TeamController.findByTrainerName)
router.put('/team', TeamController.update)
router.delete('/team/:trainerName', TeamController.delete)

export default router

/*
Este trecho de código define as rotas do servidor utilizando o framework de roteamento express.js. Vou explicar cada linha:

1. `router.post('/consumirData', PokemonController.consumirPokeData)`: 
   - Esta linha define uma rota POST que corresponde ao endpoint '/consumirData'.
   - Quando essa rota é acessada através de uma requisição POST, a função `PokemonController.consumirPokeData` será executada para lidar com a requisição.

2. `router.get('/pokemonsByType', PokemonController.pokemonsByType)`: 
   - Esta linha define uma rota GET que corresponde ao endpoint '/pokemonsByType'.
   - Quando essa rota é acessada através de uma requisição GET, a função `PokemonController.pokemonsByType` será executada para lidar com a requisição.

3. `router.get('/pokemon/type/:type', PokemonController.getPokemonsByType)`: 
   - Esta linha define uma rota GET que corresponde ao endpoint '/pokemon/type/:type', onde ':type' é um parâmetro variável na URL.
   - Quando essa rota é acessada através de uma requisição GET, a função `PokemonController.getPokemonsByType` será executada para lidar com a requisição.

4. `router.get('/pokemon/numDex/:numDex', PokemonController.getPokemonsByNumDex)`: 
   - Esta linha define uma rota GET que corresponde ao endpoint '/pokemon/numDex/:numDex', onde ':numDex' é um parâmetro variável na URL.
   - Quando essa rota é acessada através de uma requisição GET, a função `PokemonController.getPokemonsByNumDex` será executada para lidar com a requisição.

5. `router.get('/pokemon/nome/:nome', PokemonController.getPokemonsByNome)`: 
   - Esta linha define uma rota GET que corresponde ao endpoint '/pokemon/nome/:nome', onde ':nome' é um parâmetro variável na URL.
   - Quando essa rota é acessada através de uma requisição GET, a função `PokemonController.getPokemonsByNome` será executada para lidar com a requisição.

6. `router.post('/team', TeamController.create)`: 
   - Esta linha define uma rota POST que corresponde ao endpoint '/team'.
   - Quando essa rota é acessada através de uma requisição POST, a função `TeamController.create` será executada para lidar com a requisição.

7. `router.get('/team', TeamController.find)`: 
   - Esta linha define uma rota GET que corresponde ao endpoint '/team'.
   - Quando essa rota é acessada através de uma requisição GET, a função `TeamController.find` será executada para lidar com a requisição.

8. `router.get('/team/trainerName/:trainerName', TeamController.findByTrainerName)`: 
   - Esta linha define uma rota GET que corresponde ao endpoint '/team/trainerName/:trainerName', onde ':trainerName' é um parâmetro variável na URL.
   - Quando essa rota é acessada através de uma requisição GET, a função `TeamController.findByTrainerName` será executada para lidar com a requisição.

9. `router.put('/team', TeamController.update)`: 
   - Esta linha define uma rota PUT que corresponde ao endpoint '/team'.
   - Quando essa rota é

 acessada através de uma requisição PUT, a função `TeamController.update` será executada para lidar com a requisição.

10. `router.delete('/team/:trainerName', TeamController.delete)`: 
   - Esta linha define uma rota DELETE que corresponde ao endpoint '/team/:trainerName', onde ':trainerName' é um parâmetro variável na URL.
   - Quando essa rota é acessada através de uma requisição DELETE, a função `TeamController.delete` será executada para lidar com a requisição.

Em resumo, essas linhas de código definem as rotas do servidor, associando cada rota a uma função de controle correspondente. Quando uma determinada rota é acessada, a função de controle correspondente será chamada para lidar com a requisição e fornecer uma resposta adequada. Essas rotas permitem realizar várias operações relacionadas a Pokémon e equipes (teams) através de diferentes métodos HTTP, como POST, GET, PUT e DELETE.
*/